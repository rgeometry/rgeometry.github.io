extends layout.pug

mixin feature(args)
  h2= args.title
  div
    +playground(args.gist)
  div
    p
      = '\\(' + args.bigo + '\\)'
      if args.wiki
        |
        | |
        |
        a(href=args.wiki) wiki
      if args.gist
        |
        | |
        |
        a(href='https://rgeometry.org/rgeometry-playground/?gist=' + args.gist) play
      if args.api
        |
        | |
        |
        a(href='https://docs.rs/rgeometry/0.3.0/rgeometry/' + args.api) api
      if args.paper
        |
        | |
        |
        a(href=args.paper) paper
  div
    block

mixin playground(gist)
  iframe(src='https://web.rgeometry.org:20443/loader.html?gist=' +gist)

block content
  article
    p
      b RGeometry
      | 
      | is a collection of data types such as points, polygons, lines, and segments, and a variety
      | of algorithms for manipulating them. This crate will be of use to you if you've ever wondered
      | if a point is inside a polygon or if a bank is adequately covered by surveillance cameras.
    p
      b FAQ:
      dl
        dt Does RGeometry support 3D objects?
        dd Yes, but most of the algorithms are 2D only.

        dt Can I compile RGeometry to JavaScript?
        dd Yes, that is how the playground and all the interactive examples work.

        dt Any relation to <a href="https://hgeometry.org">HGeometry?</a>
        dd Yes, there is overlap in both developers and key concepts.

    p
      | Geometry is inherently visual and the quickest way to intuitively understand this
      | library is to see it in action. Below are interactive examples of most of the algorithms.
  article#two-opt.feature
    +feature(
      {title: "Random Polygons"
      ,bigo: "O(n^4)"
      ,wiki: "https://en.wikipedia.org/wiki/2-opt"
      ,gist: "298f1415a05cba9f7a0ad6832b7b4c9d"
      ,api: "algorithms/polygonization/fn.two_opt_moves.html" })
      p
        | No matter how you move the points around, the polygon is always be valid and have
        | no self-intersections.
  article#convex-hull.feature
    +feature(
      {title: "Convex Hull"
      ,bigo: "O(n \\log n)"
      ,wiki: "https://en.wikipedia.org/wiki/Graham_scan"
      ,gist: "eac484cd855d001815d23a053919b5ca"
      ,api: "algorithms/fn.convex_hull.html" })
      p
        | Graham's scan implementation for finding the convex hull of a set of points.
  article#random-convex.feature
    +feature(
      {title: "Random Convex Polygons"
      ,bigo: "O(n \\log n)"
      ,wiki: "https://en.wikipedia.org/wiki/Convex_polygon"
      ,gist: "037a23f8391390df8560a2043a14121e"
      ,api: "data/struct.PolygonConvex.html#method.random" })
      p
        | Unlike regular polygons, convex polygons can be efficiently sampled without bias.
        | Mostly useful for testing.
        | Adjust the slider to control the number of vertices.
  //- article.feature
  //-   +feature(
  //-     {title: "Convex Hull of Polygon"
  //-     ,bigo: "O(n)"
  //-     ,wiki: "https://en.wikipedia.org/wiki/Convex_hull_of_a_simple_polygon"
  //-     ,gist: "eac484cd855d001815d23a053919b5ca"
  //-     ,api: "algorithms/fn.convex_hull.html"
  //-     ,paper: "https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.512.9681&rep=rep1&type=pdf" })
  //-     p
  //-       | The convex hull of a simple polygon is the polygon of minimum perimeter that contains a given
  //-       | simple polygon. It is a special case of the more general concept of a convex hull.
  //- article#fast-visibility.feature
  //-   h2 \( O(k) \) Visibility
  //-   div
  //-     p
  //-       | Finding the visible parts of a polygon from a given point is a cornerstone in
  //-       | computational geometry. There exists many algorithms but one is of special interest.
  //-       | This algorithm is output-sensitive, meaning that the runtime is dependent not on
  //-       | the size of the input polygon but on the size of the visible area.
  //-     p
  //-       | The animation shows how a polygon is first triangulated, then the triangles are processed
  //-       | and marked in grey while the visibility polygon is outlined in green. The number of
  //-       | processed triangles is limited to those that intersect the final visibility polygon.
  //-   div
  //-     +video('fast_visibility.mp4')
  //- article#convex-hull.feature
  //-   h2 \( O(n \log n) \) Convex Hull
  //-   div
  //-     p
  //-       | A convex hull of a set of points is the smallest convex polygon that contains it.
  //-       | You can think of it as a rubber band that stretches around a collection of points.
  //-     p
  //-       | So, how is this useful? Well, there are many fast algorithms that only work on convex
  //-       | polygons. For example, there&apos;s a fast algorithm for finding the two corners that are
  //-       | furthest away from each other. By first finding the convex hull, we can then use the
  //-       | fast algorithm to find the two extreme points in the set.
  //-     p
  //-       a(href='https://en.wikipedia.org/wiki/Convex_hull') Wikipedia article.
  //-   div
  //-     +video('convexhull.mp4')
  //- article#closest-pair.feature
  //-   h2 \( O(n \log n) \) Closest Pair
  //-   div
  //-     p
  //-       | The closest pair problem for points in the Euclidean plane was among the first geometric
  //-       | problems that were treated at the origins of the systematic study of the computational
  //-       | complexity of geometric algorithms.
  //-     p
  //-       a(href='https://en.wikipedia.org/wiki/Closest_pair_of_points_problem') Wikipedia article.
  //-   div
  //-     +video('closestpair.mp4')
  //- article#random-monotone.feature
  //-   h2 \( O(n \log n) \) Random, Monotone Polygons
  //-   div
  //-     p
  //-       | Monotone polygons have the property that all rays in a certain direction
  //-       | only intersect the polygon in at most two places. These kinds of polygons
  //-       | play a key role in many algorithms such as triangulation and being able
  //-       | to quickly generate random samples helps immensely with testing.
  //-     p
  //-       a(href='https://en.wikipedia.org/wiki/Monotone_polygon') Wikipedia article.
  //-   div
  //-     +video('random_monotone.mp4')
  //- article#bentleyottmann.feature
  //-   h2 \( O((n+k) \log n) \) Line segment intersection
  //-   div
  //-     p
  //-       | Using a brute-force search, finding intersections of \(n\) lines would take \(O(n^2)\) time.
  //-       | Since we often want to find intersections, the Bentley-Ottmann algorithm which significantly
  //-       | improved the efficiency.
  //-     p
  //-       | When is this used? Well, to give good error messages, HGeometry will check polygons
  //-       | for self-intersections immediately when they&apos;re created. This leads to mistakes
  //-       | being spotted sooner rather than later.
  //-     p
  //-       a(href='https://en.wikipedia.org/wiki/Bentley%E2%80%93Ottmann_algorithm') Wikipedia article
  //-   div
  //-     +video('bentleyottmann.mp4')
  //- article#shortest-path.feature
  //-   h2 \( O(n) \) Single-Source Shortest Path
  //-   div
  //-     p
  //-       | Finding the shortest path from a specific corner to all other corners
  //-       | is a key step in many other algorithms. It&apos;s used for computing visibility
  //-       | polygons, inflated polygons, and minimum-link distances.
  //-     p
  //-       | The animation shows the shortest internal path from a green point on the side of a polygon
  //-       | to all other corner points.
  //-     | DOI: 10.1007/BF01840360
  //-     br
  //-   div
  //-     +video('multi.mp4')
